{"filter":false,"title":"debug-caesar-2.py","tooltip":"/debug-caesar-2.py","undoManager":{"mark":32,"position":32,"stack":[[{"start":{"row":0,"column":0},"end":{"row":55,"column":24},"action":"insert","lines":["# Module Lab: Caesar Cipher Program Bug #2","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"],"id":1}],[{"start":{"row":24,"column":30},"end":{"row":24,"column":31},"action":"insert","lines":["."],"id":2},{"start":{"row":24,"column":31},"end":{"row":24,"column":32},"action":"insert","lines":["u"]},{"start":{"row":24,"column":32},"end":{"row":24,"column":33},"action":"insert","lines":["p"]},{"start":{"row":24,"column":33},"end":{"row":24,"column":34},"action":"insert","lines":["p"]},{"start":{"row":24,"column":34},"end":{"row":24,"column":35},"action":"insert","lines":["e"]},{"start":{"row":24,"column":35},"end":{"row":24,"column":36},"action":"insert","lines":["r"]}],[{"start":{"row":24,"column":36},"end":{"row":24,"column":37},"action":"insert","lines":["c"],"id":3},{"start":{"row":24,"column":37},"end":{"row":24,"column":38},"action":"insert","lines":["a"]},{"start":{"row":24,"column":38},"end":{"row":24,"column":39},"action":"insert","lines":["s"]},{"start":{"row":24,"column":39},"end":{"row":24,"column":40},"action":"insert","lines":["e"]}],[{"start":{"row":24,"column":40},"end":{"row":24,"column":42},"action":"insert","lines":["()"],"id":4}],[{"start":{"row":24,"column":42},"end":{"row":24,"column":43},"action":"insert","lines":[" "],"id":5},{"start":{"row":24,"column":43},"end":{"row":24,"column":44},"action":"insert","lines":["#"]},{"start":{"row":24,"column":44},"end":{"row":24,"column":45},"action":"insert","lines":["m"]},{"start":{"row":24,"column":45},"end":{"row":24,"column":46},"action":"insert","lines":["e"]}],[{"start":{"row":24,"column":46},"end":{"row":24,"column":47},"action":"insert","lines":["s"],"id":6},{"start":{"row":24,"column":47},"end":{"row":24,"column":48},"action":"insert","lines":["s"]},{"start":{"row":24,"column":48},"end":{"row":24,"column":49},"action":"insert","lines":["a"]},{"start":{"row":24,"column":49},"end":{"row":24,"column":50},"action":"insert","lines":["g"]},{"start":{"row":24,"column":50},"end":{"row":24,"column":51},"action":"insert","lines":["e"]}],[{"start":{"row":24,"column":51},"end":{"row":24,"column":52},"action":"insert","lines":[" "],"id":7},{"start":{"row":24,"column":52},"end":{"row":24,"column":53},"action":"insert","lines":["n"]},{"start":{"row":24,"column":53},"end":{"row":24,"column":54},"action":"insert","lines":["o"]},{"start":{"row":24,"column":54},"end":{"row":24,"column":55},"action":"insert","lines":["t"]}],[{"start":{"row":24,"column":55},"end":{"row":24,"column":56},"action":"insert","lines":[" "],"id":8},{"start":{"row":24,"column":56},"end":{"row":24,"column":57},"action":"insert","lines":["c"]},{"start":{"row":24,"column":57},"end":{"row":24,"column":58},"action":"insert","lines":["o"]}],[{"start":{"row":24,"column":58},"end":{"row":24,"column":59},"action":"insert","lines":["n"],"id":9},{"start":{"row":24,"column":59},"end":{"row":24,"column":60},"action":"insert","lines":["v"]},{"start":{"row":24,"column":60},"end":{"row":24,"column":61},"action":"insert","lines":["e"]},{"start":{"row":24,"column":61},"end":{"row":24,"column":62},"action":"insert","lines":["t"]}],[{"start":{"row":24,"column":61},"end":{"row":24,"column":62},"action":"remove","lines":["t"],"id":10}],[{"start":{"row":24,"column":61},"end":{"row":24,"column":62},"action":"insert","lines":["r"],"id":11},{"start":{"row":24,"column":62},"end":{"row":24,"column":63},"action":"insert","lines":["t"]},{"start":{"row":24,"column":63},"end":{"row":24,"column":64},"action":"insert","lines":["e"]},{"start":{"row":24,"column":64},"end":{"row":24,"column":65},"action":"insert","lines":["d"]}],[{"start":{"row":24,"column":65},"end":{"row":24,"column":66},"action":"insert","lines":[" "],"id":12},{"start":{"row":24,"column":66},"end":{"row":24,"column":67},"action":"insert","lines":["t"]},{"start":{"row":24,"column":67},"end":{"row":24,"column":68},"action":"insert","lines":["o"]}],[{"start":{"row":24,"column":68},"end":{"row":24,"column":69},"action":"insert","lines":[" "],"id":13},{"start":{"row":24,"column":69},"end":{"row":24,"column":70},"action":"insert","lines":["u"]},{"start":{"row":24,"column":70},"end":{"row":24,"column":71},"action":"insert","lines":["p"]},{"start":{"row":24,"column":71},"end":{"row":24,"column":72},"action":"insert","lines":["p"]},{"start":{"row":24,"column":72},"end":{"row":24,"column":73},"action":"insert","lines":["e"]},{"start":{"row":24,"column":73},"end":{"row":24,"column":74},"action":"insert","lines":["r"]},{"start":{"row":24,"column":74},"end":{"row":24,"column":75},"action":"insert","lines":["c"]}],[{"start":{"row":24,"column":75},"end":{"row":24,"column":76},"action":"insert","lines":["a"],"id":14},{"start":{"row":24,"column":76},"end":{"row":24,"column":77},"action":"insert","lines":["s"]},{"start":{"row":24,"column":77},"end":{"row":24,"column":78},"action":"insert","lines":["e"]}],[{"start":{"row":24,"column":78},"end":{"row":24,"column":79},"action":"insert","lines":[" "],"id":15}],[{"start":{"row":24,"column":78},"end":{"row":24,"column":79},"action":"remove","lines":[" "],"id":16}],[{"start":{"row":24,"column":78},"end":{"row":24,"column":79},"action":"insert","lines":[","],"id":17}],[{"start":{"row":24,"column":79},"end":{"row":24,"column":80},"action":"insert","lines":[" "],"id":18},{"start":{"row":24,"column":80},"end":{"row":24,"column":81},"action":"insert","lines":["t"]},{"start":{"row":24,"column":81},"end":{"row":24,"column":82},"action":"insert","lines":["h"]},{"start":{"row":24,"column":82},"end":{"row":24,"column":83},"action":"insert","lines":["u"]},{"start":{"row":24,"column":83},"end":{"row":24,"column":84},"action":"insert","lines":["s"]}],[{"start":{"row":24,"column":84},"end":{"row":24,"column":85},"action":"insert","lines":[" "],"id":19}],[{"start":{"row":24,"column":85},"end":{"row":24,"column":86},"action":"insert","lines":["c"],"id":20},{"start":{"row":24,"column":86},"end":{"row":24,"column":87},"action":"insert","lines":["a"]},{"start":{"row":24,"column":87},"end":{"row":24,"column":88},"action":"insert","lines":["s"]},{"start":{"row":24,"column":88},"end":{"row":24,"column":89},"action":"insert","lines":["e"]}],[{"start":{"row":24,"column":89},"end":{"row":24,"column":90},"action":"insert","lines":[" "],"id":21},{"start":{"row":24,"column":90},"end":{"row":24,"column":91},"action":"insert","lines":["s"]},{"start":{"row":24,"column":91},"end":{"row":24,"column":92},"action":"insert","lines":["e"]},{"start":{"row":24,"column":92},"end":{"row":24,"column":93},"action":"insert","lines":["n"]},{"start":{"row":24,"column":93},"end":{"row":24,"column":94},"action":"insert","lines":["s"]}],[{"start":{"row":24,"column":94},"end":{"row":24,"column":95},"action":"insert","lines":["i"],"id":22},{"start":{"row":24,"column":95},"end":{"row":24,"column":96},"action":"insert","lines":["t"]},{"start":{"row":24,"column":96},"end":{"row":24,"column":97},"action":"insert","lines":["i"]},{"start":{"row":24,"column":97},"end":{"row":24,"column":98},"action":"insert","lines":["v"]},{"start":{"row":24,"column":98},"end":{"row":24,"column":99},"action":"insert","lines":["e"]}],[{"start":{"row":24,"column":99},"end":{"row":24,"column":100},"action":"insert","lines":[" "],"id":23},{"start":{"row":24,"column":100},"end":{"row":24,"column":101},"action":"insert","lines":["e"]}],[{"start":{"row":24,"column":101},"end":{"row":24,"column":102},"action":"insert","lines":["n"],"id":24},{"start":{"row":24,"column":102},"end":{"row":24,"column":103},"action":"insert","lines":["c"]},{"start":{"row":24,"column":103},"end":{"row":24,"column":104},"action":"insert","lines":["r"]},{"start":{"row":24,"column":104},"end":{"row":24,"column":105},"action":"insert","lines":["y"]}],[{"start":{"row":24,"column":105},"end":{"row":24,"column":106},"action":"insert","lines":["p"],"id":25},{"start":{"row":24,"column":106},"end":{"row":24,"column":107},"action":"insert","lines":["t"]},{"start":{"row":24,"column":107},"end":{"row":24,"column":108},"action":"insert","lines":["i"]},{"start":{"row":24,"column":108},"end":{"row":24,"column":109},"action":"insert","lines":["o"]},{"start":{"row":24,"column":109},"end":{"row":24,"column":110},"action":"insert","lines":["n"]}],[{"start":{"row":24,"column":52},"end":{"row":24,"column":53},"action":"insert","lines":["w"],"id":26},{"start":{"row":24,"column":53},"end":{"row":24,"column":54},"action":"insert","lines":["a"]},{"start":{"row":24,"column":54},"end":{"row":24,"column":55},"action":"insert","lines":["s"]}],[{"start":{"row":24,"column":55},"end":{"row":24,"column":56},"action":"insert","lines":[" "],"id":27}],[{"start":{"row":24,"column":36},"end":{"row":24,"column":40},"action":"remove","lines":["case"],"id":28}],[{"start":{"row":0,"column":0},"end":{"row":55,"column":24},"action":"remove","lines":["# Module Lab: Caesar Cipher Program Bug #2","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper() #message was not converted to uppercase, thus case sensitive encryption","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"],"id":29},{"start":{"row":0,"column":0},"end":{"row":55,"column":24},"action":"insert","lines":["# Module Lab: Caesar Cipher Program Bug #2","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"]}],[{"start":{"row":24,"column":30},"end":{"row":24,"column":31},"action":"insert","lines":["."],"id":30},{"start":{"row":24,"column":31},"end":{"row":24,"column":32},"action":"insert","lines":["u"]},{"start":{"row":24,"column":32},"end":{"row":24,"column":33},"action":"insert","lines":["p"]},{"start":{"row":24,"column":33},"end":{"row":24,"column":34},"action":"insert","lines":["p"]},{"start":{"row":24,"column":34},"end":{"row":24,"column":35},"action":"insert","lines":["e"]},{"start":{"row":24,"column":35},"end":{"row":24,"column":36},"action":"insert","lines":["r"]}],[{"start":{"row":24,"column":36},"end":{"row":24,"column":38},"action":"insert","lines":["()"],"id":31}],[{"start":{"row":24,"column":38},"end":{"row":24,"column":39},"action":"insert","lines":[" "],"id":32}],[{"start":{"row":24,"column":39},"end":{"row":24,"column":110},"action":"insert","lines":["#message was not converted to uppercase, thus case sensitive encryption"],"id":33}],[{"start":{"row":26,"column":0},"end":{"row":27,"column":0},"action":"remove","lines":["        position = alphabet.find(currentCharacter)",""],"id":34}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":22,"column":25},"end":{"row":22,"column":25},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":7,"state":"start","mode":"ace/mode/python"}},"timestamp":1649634646942,"hash":"6685bd74d103323fbebc5c1bc5df10f3f87ad6c5"}